-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BigStructure.Query exposing (..)

import BigStructure.InputObject
import BigStructure.Interface
import BigStructure.Object
import BigStructure.Scalar
import BigStructure.ScalarCodecs
import BigStructure.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AllPdbsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all PDB records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allPdbs :
    AllPdbsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.Pdb
    -> SelectionSet (List decodesTo) RootQuery
allPdbs requiredArgs____ object____ =
    Object.selectionForCompositeField "allPdbs" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


{-| Returns a count of the PDB records.
-}
pdbCount : SelectionSet Int RootQuery
pdbCount =
    Object.selectionForField "Int" "pdbCount" [] Decode.int


type alias AllBiolUnitsRequiredArguments =
    { count : Int
    , page : Int
    }


{-|

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allBiolUnits :
    AllBiolUnitsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.BiolUnit
    -> SelectionSet (List decodesTo) RootQuery
allBiolUnits requiredArgs____ object____ =
    Object.selectionForCompositeField "allBiolUnits" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredBiolUnitsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets preferred biological unit records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
preferredBiolUnits :
    PreferredBiolUnitsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.BiolUnit
    -> SelectionSet (List decodesTo) RootQuery
preferredBiolUnits requiredArgs____ object____ =
    Object.selectionForCompositeField "preferredBiolUnits" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


{-| Returns a count of the biological unit records.
-}
biolUnitCount : SelectionSet Int RootQuery
biolUnitCount =
    Object.selectionForField "Int" "biolUnitCount" [] Decode.int


type alias AllStatesRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all states.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allStates :
    AllStatesRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.State
    -> SelectionSet (List decodesTo) RootQuery
allStates requiredArgs____ object____ =
    Object.selectionForCompositeField "allStates" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredStatesOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredStatesRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets the preferred state for all preferred biological units.

  - stateNumber - The state number that is preferred.
  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
preferredStates :
    (PreferredStatesOptionalArguments -> PreferredStatesOptionalArguments)
    -> PreferredStatesRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.State
    -> SelectionSet (List decodesTo) RootQuery
preferredStates fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredStates" (optionalArgs____ ++ [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ]) object____ (identity >> Decode.list)


type alias PreferredStatesSubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredStatesSubsetRequiredArguments =
    { codes : List String }


{-| Gets preferred biological unit state records. It requires the `codes`parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred.

-}
preferredStatesSubset :
    (PreferredStatesSubsetOptionalArguments -> PreferredStatesSubsetOptionalArguments)
    -> PreferredStatesSubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.State
    -> SelectionSet (List decodesTo) RootQuery
preferredStatesSubset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredStatesSubset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)


{-| Returns a count of the state records.
-}
stateCount : SelectionSet Int RootQuery
stateCount =
    Object.selectionForField "Int" "stateCount" [] Decode.int


type alias AllChainsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all chains.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allChains :
    AllChainsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.Chain
    -> SelectionSet (List decodesTo) RootQuery
allChains requiredArgs____ object____ =
    Object.selectionForCompositeField "allChains" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


{-| Returns a count of the chain records.
-}
chainCount : SelectionSet Int RootQuery
chainCount =
    Object.selectionForField "Int" "chainCount" [] Decode.int


type alias AllBudeffResultsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all bude ff results records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allBudeffResults :
    AllBudeffResultsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.BudeFFResults
    -> SelectionSet (List decodesTo) RootQuery
allBudeffResults requiredArgs____ object____ =
    Object.selectionForCompositeField "allBudeffResults" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredBudeSubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredBudeSubsetRequiredArguments =
    { codes : List String }


{-| Gets BUDE results for preferred biological unit state records. It requires the `codes` parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred. Default = 0

-}
preferredBudeSubset :
    (PreferredBudeSubsetOptionalArguments -> PreferredBudeSubsetOptionalArguments)
    -> PreferredBudeSubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.BudeFFResults
    -> SelectionSet (List decodesTo) RootQuery
preferredBudeSubset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredBudeSubset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)


type alias AllEvoef2ResultsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all evoef2 results records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allEvoef2Results :
    AllEvoef2ResultsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.EvoEF2Results
    -> SelectionSet (List decodesTo) RootQuery
allEvoef2Results requiredArgs____ object____ =
    Object.selectionForCompositeField "allEvoef2Results" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredEvoef2SubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredEvoef2SubsetRequiredArguments =
    { codes : List String }


{-| Gets EvoEF2 results for preferred biological unit state records. It requires the `codes` parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred. Default = 0

-}
preferredEvoef2Subset :
    (PreferredEvoef2SubsetOptionalArguments -> PreferredEvoef2SubsetOptionalArguments)
    -> PreferredEvoef2SubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.EvoEF2Results
    -> SelectionSet (List decodesTo) RootQuery
preferredEvoef2Subset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredEvoef2Subset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)


type alias AllDfire2ResultsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all dfire2 results records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allDfire2Results :
    AllDfire2ResultsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.DFIRE2Results
    -> SelectionSet (List decodesTo) RootQuery
allDfire2Results requiredArgs____ object____ =
    Object.selectionForCompositeField "allDfire2Results" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredDfire2SubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredDfire2SubsetRequiredArguments =
    { codes : List String }


{-| Gets DFIRE2 results for preferred biological unit state records. It requires the `codes` parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred. Default = 0

-}
preferredDfire2Subset :
    (PreferredDfire2SubsetOptionalArguments -> PreferredDfire2SubsetOptionalArguments)
    -> PreferredDfire2SubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.DFIRE2Results
    -> SelectionSet (List decodesTo) RootQuery
preferredDfire2Subset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredDfire2Subset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)


type alias AllRosettaResultsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all rosetta results records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allRosettaResults :
    AllRosettaResultsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.RosettaResults
    -> SelectionSet (List decodesTo) RootQuery
allRosettaResults requiredArgs____ object____ =
    Object.selectionForCompositeField "allRosettaResults" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredRosettaSubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredRosettaSubsetRequiredArguments =
    { codes : List String }


{-| Gets Rosetta results for preferred biological unit state records. It requires the `codes` parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred. Default = 0

-}
preferredRosettaSubset :
    (PreferredRosettaSubsetOptionalArguments -> PreferredRosettaSubsetOptionalArguments)
    -> PreferredRosettaSubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.RosettaResults
    -> SelectionSet (List decodesTo) RootQuery
preferredRosettaSubset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredRosettaSubset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)


type alias AllAggrescan3dResultsRequiredArguments =
    { count : Int
    , page : Int
    }


{-| Gets all aggrescan3d results records.

  - count - Number of entries to be returned. Max=1,000
  - page - Page of entries i.e. with a count of 100, page 1 would be entry 1-100, page 2 would be entries 101-200.

-}
allAggrescan3dResults :
    AllAggrescan3dResultsRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.Aggrescan3DResults
    -> SelectionSet (List decodesTo) RootQuery
allAggrescan3dResults requiredArgs____ object____ =
    Object.selectionForCompositeField "allAggrescan3dResults" [ Argument.required "count" requiredArgs____.count Encode.int, Argument.required "page" requiredArgs____.page Encode.int ] object____ (identity >> Decode.list)


type alias PreferredAggrescan3dSubsetOptionalArguments =
    { stateNumber : OptionalArgument Int }


type alias PreferredAggrescan3dSubsetRequiredArguments =
    { codes : List String }


{-| Gets Aggrescan3D results for preferred biological unit state records. It requires the `codes` parameter, which is a list of PDB codes to create the subset.

  - codes - A list of PDB codes to be retrieved. Length capped at 1000.
  - stateNumber - The state number that is preferred. Default = 0

-}
preferredAggrescan3dSubset :
    (PreferredAggrescan3dSubsetOptionalArguments -> PreferredAggrescan3dSubsetOptionalArguments)
    -> PreferredAggrescan3dSubsetRequiredArguments
    -> SelectionSet decodesTo BigStructure.Object.Aggrescan3DResults
    -> SelectionSet (List decodesTo) RootQuery
preferredAggrescan3dSubset fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { stateNumber = Absent }

        optionalArgs____ =
            [ Argument.optional "stateNumber" filledInOptionals____.stateNumber Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "preferredAggrescan3dSubset" (optionalArgs____ ++ [ Argument.required "codes" requiredArgs____.codes (Encode.string |> Encode.list) ]) object____ (identity >> Decode.list)
